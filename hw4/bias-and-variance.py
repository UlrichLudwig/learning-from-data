import sys
sys.path.append('..')

import numpy as np
import scipy
import random

from common.model import Model
from common.question import Question

from hw2.linear_regression import LinearRegression


def target(x):
    return np.sin(np.pi * x[0])


def test_run():
    weights = []

    training_set = np.array([[random.uniform(-1, 1)] for i in xrange(10000)])
    targets = np.array([[target(point)] for point in training_set])

    # question says to pick 2 random points from the set
    # and train on those
    for i in xrange(10000):
        subset = random.sample(training_set, 2)
        lr = LinearRegression(subset)
        lr.target = target
        lr.train()
        weights += [lr.weights.T[0]]

    # gbar is the average hypothesis, so average the weights
    gbar = np.mean(weights)

    # get the targets generated by gbar
    gbar_targets = np.dot(training_set, gbar.T)

    # bias is the squared error
    bias = np.mean((gbar_targets - targets) ** 2)

    weights = np.array(weights)

    # now compare every generated hypothesis in weights
    # with the average hypothesis gbar
    ranked_hypotheses = np.dot(training_set, weights.T)
    variance = []

    for i in xrange(len(ranked_hypotheses)):
        g = np.array([ranked_hypotheses[:, i]]).T
        variance += [np.mean((g - gbar_targets) ** 2)]

    variance = np.mean(variance)

    return (gbar, bias, variance)

if __name__ == "__main__":
    question5 = Question("4. gbar", [0, 0.79, 1.07, 1.58, float('nan')], 'e')
    question6 = Question("5. bias", [0.1, 0.3, 0.5, 0.7, 1.0], 'b')
    question7 = Question("6. variance", [0.2, 0.4, 0.6, 0.8, 1.0], 'a')

    gbar, bias, variance = test_run()

    # q5 will show incorrect because the answer is 'none of the above'
    question5.check(gbar)
    question6.check(bias)
    question7.check(variance)
